package org.metadatacenter.submission;

import biosample.TypeAttribute;
import biosample.TypeBioSample;
import biosample.TypeBioSampleIdentifier;
import common.sp.TypeDescriptor;
import common.sp.TypePrimaryId;
import common.sp.TypeRefId;
import generated.TypeFileAttribute;
import generated.TypeSubmission;
import org.metadatacenter.submission.biosample.AIRRTemplate;
import org.metadatacenter.submission.biosample.BioSampleOptionalAttribute;
import org.metadatacenter.submission.biosample.NCBIBioProject;
import org.metadatacenter.submission.biosample.NCBIBioSample;
import org.metadatacenter.submission.biosample.NCBISRA;
import org.metadatacenter.submission.biosample.SRAOptionalAttribute;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.io.StringWriter;
import java.util.GregorianCalendar;

/**
 * Convert a CEDAR JSON Schema-based AIRR template instance into a BioProject/BioSample/SRA XML-based submission.
 */
public class AIRRTemplate2SRAConverter
{
  /**
   * The {@link org.metadatacenter.submission.biosample.AIRRTemplate} class is generated by jsonschema2pojo from the
   * AIRRTemplate.json JSON Schema file in the resources directory.
   *
   * @param airrInstance An AIRR template instance
   * @return A string containing a BioSample-conformant XML representation of the supplied AIRR instance
   * @throws DatatypeConfigurationException If a configuration error occurs during processing
   * @throws JAXBException                  If a JAXB error occurs during processing
   */
  public String generateSRASubmissionXMLFromAIRRTemplateInstance(AIRRTemplate airrInstance)
    throws DatatypeConfigurationException, JAXBException
  {
    final generated.ObjectFactory objectFactory = new generated.ObjectFactory();
    final biosample.ObjectFactory bioSampleObjectFactory = new biosample.ObjectFactory();
    final common.sp.ObjectFactory spCommonObjectFactory = new common.sp.ObjectFactory();

    TypeSubmission xmlSubmission = objectFactory.createTypeSubmission();
    NCBIBioProject ncbiBioProject = airrInstance.getNCBIBioProject();

    // BioProject ID
    ncbiBioProject.setBioProjectId(ncbiBioProject.getBioProjectId()); //BioProject ID

    // Project Title
    ncbiBioProject.setProjectDataType(ncbiBioProject.getProjectDataType()); // project title

    // Submission/Description/public description
    ncbiBioProject.setPublicDescription(ncbiBioProject.getPublicDescription());  // public description

    // Submission/Description/project data type
    ncbiBioProject.setProjectDataType(ncbiBioProject.getProjectDataType()); // proejct data type

    // Submission/Description/sample scope
    ncbiBioProject.setSampleScope(ncbiBioProject.getSampleScope()); // proejct sample scope

    // Submission/Description/Organization/ContactInfo/Name

    ncbiBioProject.setFirstName(ncbiBioProject.getFirstName()); // first name
    ncbiBioProject.setLastName(ncbiBioProject.getLastName()); // last name

    // Submission/Description/Organization/ContactInfo/email
    ncbiBioProject.setEmail(ncbiBioProject.getEmail()); // e-mail

    // Submission/Description/Organization/Name
    // Submission/Description/Organization
    ncbiBioProject.setSubmittingOrganization(ncbiBioProject.getSubmittingOrganization()); // Submitting Organization

    // Submission/Description/Department/Name
    ncbiBioProject.setDepartment(ncbiBioProject.getDepartment()); // Submitting Organization // department

    // Submission/Action[1] - BioSample
    TypeSubmission.Action bioSampleAction = objectFactory.createTypeSubmissionAction();
    xmlSubmission.getAction().add(bioSampleAction);

    // Submission/Action[1]/AddData/target_db
    TypeSubmission.Action.AddData addData = objectFactory.createTypeSubmissionActionAddData();
    bioSampleAction.setAddData(addData);
    addData.setTargetDb("BioSample");

    // Submission/Action[1]/AddData/Data/content_type
    TypeSubmission.Action.AddData.Data data = objectFactory.createTypeSubmissionActionAddDataData();
    addData.getData().add(data);
    data.setContentType("XML");

    // Submission/Action[1]/AddData/Data/XMLContent
    TypeSubmission.Action.AddData.Data.XmlContent xmlContent = objectFactory.createTypeInlineDataXmlContent();
    data.setXmlContent(xmlContent);

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/schema_version
    TypeBioSample bioSample = bioSampleObjectFactory.createTypeBioSample();
    xmlContent.setBioSample(bioSample);
    bioSample.setSchemaVersion("2.0");

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/SampleID
    TypeBioSampleIdentifier sampleID = bioSampleObjectFactory.createTypeBioSampleIdentifier();
    bioSample.setSampleId(sampleID);

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/SampleID/SPUID
    TypeBioSampleIdentifier.SPUID spuid = bioSampleObjectFactory.createTypeBioSampleIdentifierSPUID();
    sampleID.getSPUID().add(spuid);
    spuid.setSpuidNamespace("CEDAR-NCBI");
    spuid.setValue(ncbiBioProject.getBioProjectId().getValue());

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Descriptor
    TypeDescriptor descriptor = spCommonObjectFactory.createTypeDescriptor();
    bioSample.setDescriptor(descriptor);
    descriptor.setTitle("CEDAR-NCBI Example instance of mythania gravis study"); // TODO Where from?

    TypeRefId bioProject = spCommonObjectFactory.createTypeRefId();
    bioSample.getBioProject().add(bioProject);

    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/BioProject/PrimaryID
    TypePrimaryId bioProjectPrimaryID = spCommonObjectFactory.createTypePrimaryId();
    bioProject.setPrimaryId(bioProjectPrimaryID);
    bioProjectPrimaryID.setDb("BioProject");
    bioProjectPrimaryID.setValue(ncbiBioProject.getBioProjectId().getValue());
    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Package
    bioSample
      .setPackage("Human.1.0"); // TODO Is this hard coded for AIRR? //Could be get from datatype part of bioproject

    //RE-CHECK LOOPS VARIABLES
    // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Attributes
    TypeBioSample.Attributes bioSampleAttributes = bioSampleObjectFactory.createTypeBioSampleAttributes();
    bioSample.setAttributes(bioSampleAttributes);
    for (NCBIBioSample ncbiBioSample : airrInstance.getNCBIBioSample()) {

      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Attributes/Attribute - AIRR BioSample attributes

      // New add
      TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("projectedReleaseDate");
      attribute.setValue(ncbiBioSample.getReleaseDate().getValue());

      // New add
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("sampleType");
      attribute.setValue(ncbiBioSample.getSampleType().getValue());

      // New add
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("sampleName");
      attribute.setValue(ncbiBioSample.getSampleName().getValue());

      // new add
      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("isolate");
      attribute.setValue(ncbiBioSample.getIsolate().getValue());

      // New add
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("organism");
      attribute.setValue(ncbiBioSample.getOrganism().getValueLabel());

      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("age");
      attribute.setValue(ncbiBioSample.getAge().getValue());

      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("biomaterialProvider");
      attribute.setValue(ncbiBioSample.getBiomaterialProvider().getValue());

      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("sex");
      attribute.setValue(ncbiBioSample.getSex().getValue());

      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("tissue");
      attribute.setValue(ncbiBioSample.getTissue().getValueLabel());

      //Added new
      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("phenotype");
      attribute.setValue(ncbiBioSample.getPhenotype().getValue());

      //Added new
      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("cellType");
      attribute.setValue(ncbiBioSample.getCellType().getValueLabel());

      //Added new
      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("cellSubType");
      attribute.setValue(ncbiBioSample.getCellSubtype().getValueLabel());

      //Added new
      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("disease");
      attribute.setValue(ncbiBioSample.getDisease().getValueLabel());

      // new add
      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("diseaseStage");
      attribute.setValue(ncbiBioSample.getDiseaseStage().getValue());

      // new add
      attribute = bioSampleObjectFactory.createTypeAttribute();
      bioSampleAttributes.getAttribute().add(attribute);
      attribute.setAttributeName("healthState");
      attribute.setValue(ncbiBioSample.getHealthState().getValue());

      //RE-CHECK LOOPS VARIABLES

      for (BioSampleOptionalAttribute optionalAttribute : ncbiBioSample.getBioSampleOptionalAttributes()) {
        attribute = bioSampleObjectFactory.createTypeAttribute();
        bioSampleAttributes.getAttribute().add(attribute);
        attribute.setAttributeName(optionalAttribute.getName().getValue());
        attribute.setValue(optionalAttribute.getValue().getValue());
      }
    }

    //RE-CHECK LOOPS VARIABLES    
    for (NCBISRA ncbiSRA : airrInstance.getNCBISRA()) {

      // Submission/Action[1]/AddData/Data/XMLContent/BioSample/Attributes
      TypeBioSample.Attributes sraAttributes = bioSampleObjectFactory.createTypeBioSampleAttributes();

      // Submission/Action[2] - SRA
      TypeSubmission.Action sraAction = objectFactory.createTypeSubmissionAction();
      xmlSubmission.getAction().add(sraAction);

      // Submission/Action[2]/AddFiles/target_db
      TypeSubmission.Action.AddFiles sraAddFiles = objectFactory.createTypeSubmissionActionAddFiles();
      sraAction.setAddFiles(sraAddFiles);
      sraAddFiles.setTargetDb("SRA");
      // TODO Set attribute CDE ID?

      // Submission/Action[2]/AddFiles/File
      TypeSubmission.Action.AddFiles.File sraFile = objectFactory.createTypeSubmissionActionAddFilesFile();
      sraAddFiles.getFile().add(sraFile);

      // Submission/Action[1]/AddFiles/Attributes/Attribute - AIRR SRA attributes
      TypeFileAttribute fileAttribute = objectFactory.createTypeFileAttribute();
      fileAttribute.setName("sampleName");
      fileAttribute.setValue(ncbiSRA.getSampleName().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

      fileAttribute.setName("libraryID");
      fileAttribute.setValue(ncbiSRA.getLibraryId().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

      fileAttribute = objectFactory.createTypeFileAttribute();
      fileAttribute.setName("libraryTitle");
      fileAttribute.setValue(ncbiSRA.getLibraryTitle().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

      fileAttribute = objectFactory.createTypeFileAttribute();
      fileAttribute.setName("libraryStrategy");
      fileAttribute.setValue(ncbiSRA.getLibraryStrategy().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

      fileAttribute = objectFactory.createTypeFileAttribute();
      fileAttribute.setName("librarySource");
      fileAttribute.setValue(ncbiSRA.getLibrarySource().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

      fileAttribute = objectFactory.createTypeFileAttribute();
      fileAttribute.setName("librarySelection");
      fileAttribute.setValue(ncbiSRA.getLibrarySelection().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

      fileAttribute = objectFactory.createTypeFileAttribute();
      fileAttribute.setName("libraryLayout");
      fileAttribute.setValue(ncbiSRA.getLibraryLayout().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

      fileAttribute = objectFactory.createTypeFileAttribute();
      fileAttribute.setName("platform");
      fileAttribute.setValue(ncbiSRA.getPlatform().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

      fileAttribute = objectFactory.createTypeFileAttribute();
      fileAttribute.setName("instrumentModel");
      fileAttribute.setValue(ncbiSRA.getInstrumentModel().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

      //new added
      fileAttribute = objectFactory.createTypeFileAttribute();
      fileAttribute.setName("designDescription");
      fileAttribute.setValue(ncbiSRA.getDesignDescription().getValue());
      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      // File name and type (multiple) new added
      //RE-CHECK LOOPS VARIABLES
      for (SRAOptionalAttribute sraOptionalAttribute : ncbiSRA.getSRAOptionalAttributes()) {

        fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("FileType");
        fileAttribute.setValue(sraOptionalAttribute.getFileType().getValue());
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);

        fileAttribute = objectFactory.createTypeFileAttribute();
        fileAttribute.setName("FileName");
        fileAttribute.setValue(sraOptionalAttribute.getFileName().getValue());
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }
    }

    StringWriter writer = new StringWriter();

    JAXBElement<TypeSubmission> submissionRoot = objectFactory.createSubmission(xmlSubmission);
    JAXBContext ctx = JAXBContext.newInstance(TypeSubmission.class);
    Marshaller marshaller = ctx.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
    //marshaller.marshal(submissionRoot, System.out);
    marshaller.marshal(submissionRoot, writer);

    return writer.toString();
  }

  private XMLGregorianCalendar createXMLGregorianCalendar(String date) throws DatatypeConfigurationException
  {
    DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
    GregorianCalendar gc = new GregorianCalendar();

    return datatypeFactory.newXMLGregorianCalendar(gc);
  }
}
