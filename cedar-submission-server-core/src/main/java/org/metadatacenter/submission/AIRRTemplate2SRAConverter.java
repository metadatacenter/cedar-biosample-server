package org.metadatacenter.submission;

import biosample.TypeAttribute;
import biosample.TypeBioSample;
import biosample.TypeBioSampleIdentifier;
import com.fasterxml.jackson.databind.ObjectMapper;
import common.sp.*;
import generated.*;
import org.metadatacenter.submission.biosample.AIRRTemplate;
import org.metadatacenter.submission.biosample.BioSampleOptionalAttribute;
import org.metadatacenter.submission.biosample.FileName;
import org.metadatacenter.submission.biosample.FileType;
import org.metadatacenter.submission.biosample.NCBIBioProject;
import org.metadatacenter.submission.biosample.NCBIBioSample;
import org.metadatacenter.submission.biosample.NCBISRA;
import org.metadatacenter.submission.biosample.SRAOptionalAttribute;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.UUID;

// TODO Very brittle. Need to do a lot more testing for empty values

/**
 * Convert a CEDAR JSON Schema-based AIRR template instance into a BioProject/BioSample/SRA XML-based submission.
 */
public class AIRRTemplate2SRAConverter
{
  private List<String> bioSampleIds = new ArrayList<>();
  private List<String> sraIds = new ArrayList<>();

  /**
   * The {@link AIRRTemplate} class is generated by jsonschema2pojo from the
   * AIRRTemplate.json JSON Schema file in the resources directory.
   *
   * @param airrInstance An AIRR template instance
   * @return A string containing a BioSample-conformant XML representation of the supplied AIRR instance
   * @throws DatatypeConfigurationException If a configuration error occurs during processing
   * @throws JAXBException                  If a JAXB error occurs during processing
   */
  public String generateSRASubmissionXMLFromAIRRTemplateInstance(AIRRTemplate airrInstance)
    throws DatatypeConfigurationException, JAXBException
  {
    final generated.ObjectFactory submissionObjectFactory = new generated.ObjectFactory();
    final common.sp.ObjectFactory spCommonObjectFactory = new common.sp.ObjectFactory();
    final biosample.ObjectFactory bioSampleObjectFactory = new biosample.ObjectFactory();

    Submission submission = submissionObjectFactory.createSubmission();
    NCBIBioProject ncbiBioProject = airrInstance.getNCBIBioProject();

    /*
     * Object construction for the submission <Description> section
     */
    TypeName contactName = spCommonObjectFactory.createTypeName();
    contactName.setFirst(ncbiBioProject.getFirstName().getValue());
    contactName.setLast(ncbiBioProject.getLastName().getValue());

    TypeContactInfo contactInfo = spCommonObjectFactory.createTypeContactInfo();
    contactInfo.setEmail(ncbiBioProject.getEmail().getValue());
    contactInfo.setName(contactName);

    TypeOrganization.Name organizationName = submissionObjectFactory.createTypeOrganizationName();
    organizationName.setValue(ncbiBioProject.getSubmittingOrganization().getValue());

    TypeAccount contactSubmitter = submissionObjectFactory.createTypeAccount();
    contactSubmitter.setUserName("loremipsum"); // XXX: Hard-coded due to no corresponding entry in the AIRR instance

    TypeOrganization contactOrganization = submissionObjectFactory.createTypeOrganization();
    contactOrganization.setType("lab"); // XXX: Hard-coded due to no corresponding entry in the AIRR instance
    contactOrganization.setRole("owner"); // XXX: Hard-coded due to no corresponding entry in the AIRR instance
    contactOrganization.setName(organizationName);
    contactOrganization.getContact().add(contactInfo);

    Submission.Description submissionDescription = submissionObjectFactory.createSubmissionDescription();
    submissionDescription.setComment("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor "
        + "incididunt ut labore et dolore magna aliqua."); // XXX: Hard-coded due to no corresponding entry in the AIRR instance
    submissionDescription.setSubmitter(contactSubmitter);
    submissionDescription.getOrganization().add(contactOrganization);

    submission.setDescription(submissionDescription);

    /*
     * Object construction for the BioSample submission <Action> section
     */
    for (NCBIBioSample ncbiBioSample : airrInstance.getNCBIBioSample()) {

      // Start <BioSample> section
      TypeBioSample bioSample = bioSampleObjectFactory.createTypeBioSample();
      bioSample.setSchemaVersion("2.0"); // XXX: Hard-coded

      // SampleId
      String bioSampleId = createNewBioSampleId();
      TypeBioSampleIdentifier.SPUID spuid = bioSampleObjectFactory.createTypeBioSampleIdentifierSPUID();
      spuid.setSpuidNamespace("CEDAR"); // XXX: Hard-coded
      spuid.setValue(bioSampleId);

      TypeBioSampleIdentifier sampleID = bioSampleObjectFactory.createTypeBioSampleIdentifier();
      sampleID.getSPUID().add(spuid);

      bioSample.setSampleId(sampleID);

      // Descriptor
      JAXBElement descriptionElement = new JAXBElement(
          new QName("p"), String.class, // as in HTML <p> tag
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor "
              + "incididunt ut labore et dolore magna aliqua."); // XXX: Hard-coded due to no corresponding entry in the AIRR instance

      TypeBlock sampleDescription = spCommonObjectFactory.createTypeBlock();
      sampleDescription.getPOrUlOrOl().add(descriptionElement);

      TypeDescriptor sampleDescriptor = spCommonObjectFactory.createTypeDescriptor();
      sampleDescriptor.setTitle("Lorem ipsum dolor sit amet"); // XXX: Hard-coded due to no corresponding entry in the AIRR instance
      sampleDescriptor.setDescription(sampleDescription);

      bioSample.setDescriptor(sampleDescriptor);

      // Organism
      TypeOrganism sampleOrganism = spCommonObjectFactory.createTypeOrganism();
      sampleOrganism.setOrganismName("Homo sapiens"); // XXX: Hard-coded

      bioSample.setOrganism(sampleOrganism);

      // Package
      bioSample.setPackage("Human.1.0"); // XXX: Hard-coded

      // Attributes
      TypeBioSample.Attributes bioSampleAttributes = bioSampleObjectFactory.createTypeBioSampleAttributes();
      String value = ncbiBioSample.getReleaseDate().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("projectedReleaseDate"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getSampleType().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("sampleType"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getSampleName().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("sampleName"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getIsolate().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("isolate"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getOrganism().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("organism"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getAge().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("age"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getBiomaterialProvider().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("biomaterialProvider"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getSex().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("sex"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getTissue().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("tissue"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getPhenotype().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("phenotype"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getCellType().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("cellType"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getCellSubtype().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("cellSubType"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getDisease().getValueLabel();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("disease"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getDiseaseStage().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("diseaseStage"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      value = ncbiBioSample.getHealthState().getValue();
      if (value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("healthState"); // XXX: Hard-coded
        attribute.setValue(value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Optional attributes
      for (BioSampleOptionalAttribute optionalAttribute : ncbiBioSample.getBioSampleOptionalAttributes()) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName(optionalAttribute.getName().getValue());
        attribute.setValue(optionalAttribute.getValue().getValue());
        bioSampleAttributes.getAttribute().add(attribute);
      }

      bioSample.setAttributes(bioSampleAttributes);

      // XmlContent
      // Developement Note: The original NCBI submission doesn't includ the BioSample element, so it
      // is required to append the rule in the submission.xsd file (See submission.xsd:441)
      TypeInlineData.XmlContent xmlContent = submissionObjectFactory.createTypeInlineDataXmlContent();
      xmlContent.setBioSample(bioSample);

      // Data
      Submission.Action.AddData.Data bioSampleData = submissionObjectFactory.createSubmissionActionAddDataData();
      bioSampleData.setContentType("XML"); // XXX: Hard-coded
      bioSampleData.setXmlContent(xmlContent);

      // Identifier
      TypeSPUID bioSampleSpuid = spCommonObjectFactory.createTypeSPUID();
      bioSampleSpuid.setSpuidNamespace("CEDAR"); // XXX: Hard-coded
      bioSampleSpuid.setValue(bioSampleId);

      TypeIdentifier bioSampleIdentifier = spCommonObjectFactory.createTypeIdentifier();
      bioSampleIdentifier.setSPUID(bioSampleSpuid);

      // AddData
      Submission.Action.AddData bioSampleAddData = submissionObjectFactory.createSubmissionActionAddData();
      bioSampleAddData.setTargetDb(TypeTargetDb.BIO_SAMPLE);
      bioSampleAddData.setData(bioSampleData);
      bioSampleAddData.setIdentifier(bioSampleIdentifier);

      // Action
      Submission.Action bioSampleAction = submissionObjectFactory.createSubmissionAction();
      bioSampleAction.setAddData(bioSampleAddData);

      submission.getAction().add(bioSampleAction);
    }

    int sraIndex = 0; // to track the corresponding BioSample record for this SRA entry
    for (NCBISRA ncbiSRA : airrInstance.getNCBISRA()) {

      // AddFiles
      Submission.Action.AddFiles sraAddFiles = submissionObjectFactory.createSubmissionActionAddFiles();
      sraAddFiles.setTargetDb(TypeTargetDb.SRA);

      // File
      for (SRAOptionalAttribute sraOptionalAttribute : ncbiSRA.getSRAOptionalAttributes()) {
        FileName fileName = sraOptionalAttribute.getFileName();
        FileType fileType = sraOptionalAttribute.getFileType();
        if (fileName != null && fileType != null) {
          Submission.Action.AddFiles.File sraFile = submissionObjectFactory.createSubmissionActionAddFilesFile();
          sraFile.setFilePath(fileName.getValue());
          sraFile.setDataType(fileType.getValue());
          sraAddFiles.getFile().add(sraFile);
        }
      }

      // Attribute
      String value = ncbiSRA.getSampleName().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("sampleName");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibraryId().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("libraryID");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibraryTitle().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("libraryTitle");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibraryStrategy().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_strategy");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibrarySource().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_source");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibrarySelection().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_selection");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getLibraryLayout().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_layout");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getPlatform().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("platform");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getInstrumentModel().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("instrument_model");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      value = ncbiSRA.getDesignDescription().getValue();
      if (value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("designDescription");
        fileAttribute.setValue(value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // AttributeRefId: For BioProject Reference ID
      TypeSPUID bioProjectSpuid = spCommonObjectFactory.createTypeSPUID();
      bioProjectSpuid.setSpuidNamespace("CEDAR"); // XXX: Hard-coded
      bioProjectSpuid.setValue(ncbiBioProject.getBioProjectId().getValue());

      TypeRefId bioProjectRefId = spCommonObjectFactory.createTypeRefId();
      bioProjectRefId.setSPUID(bioProjectSpuid);

      TypeFileAttributeRefId bioProjectIdentifier = submissionObjectFactory.createTypeFileAttributeRefId();
      bioProjectIdentifier.setName("BioProject");
      bioProjectIdentifier.setRefId(bioProjectRefId);

      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(bioProjectIdentifier);

      // AttributeRefId: For BioSample Reference ID
      TypeSPUID bioSampleSpuid = spCommonObjectFactory.createTypeSPUID();
      bioSampleSpuid.setSpuidNamespace("CEDAR");
      bioSampleSpuid.setValue(getBioSampleId(sraIndex));

      TypeRefId bioSampleRefId = spCommonObjectFactory.createTypeRefId();
      bioSampleRefId.setSPUID(bioSampleSpuid);

      TypeFileAttributeRefId bioSampleIdentifier = submissionObjectFactory.createTypeFileAttributeRefId();
      bioSampleIdentifier.setName("BioSample");
      bioSampleIdentifier.setRefId(bioSampleRefId);

      sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(bioSampleIdentifier);

      // Identifier: For SRA
      TypeLocalId localSraId = spCommonObjectFactory.createTypeLocalId();
      localSraId.setValue(createNewSraId());

      TypeIdentifier sraIdentifier = spCommonObjectFactory.createTypeIdentifier();
      sraIdentifier.setLocalId(localSraId);

      sraAddFiles.setIdentifier(sraIdentifier);

      // Action
      Submission.Action sraAction = submissionObjectFactory.createSubmissionAction();
      sraAction.setAddFiles(sraAddFiles);

      submission.getAction().add(sraAction);

      sraIndex++; // increment the index counter
    }

    StringWriter writer = new StringWriter();

    JAXBContext ctx = JAXBContext.newInstance(Submission.class);
    Marshaller marshaller = ctx.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
    marshaller.marshal(submission, writer);

    return writer.toString();
  }

  private XMLGregorianCalendar createXMLGregorianCalendar(String date) throws DatatypeConfigurationException {
    DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
    GregorianCalendar gc = new GregorianCalendar();

    return datatypeFactory.newXMLGregorianCalendar(gc);
  }

  private String createNewBioSampleId() {
    String id = "BioSample-" + UUID.randomUUID();
    bioSampleIds.add(id);
    return id;
  }

  private String createNewSraId() {
    String id = "SRA-" + UUID.randomUUID();
    sraIds.add(id);
    return id;
  }

  private String getBioSampleId(int index) {
    return bioSampleIds.get(index);
  }

  private String getSraId(int index) {
    return sraIds.get(index);
  }
}
