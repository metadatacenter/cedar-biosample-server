package org.metadatacenter.submission.ncbi.cairr;

import biosample.TypeAttribute;
import biosample.TypeBioSample;
import biosample.TypeBioSampleIdentifier;
import common.sp.TypeBlock;
import common.sp.TypeContactInfo;
import common.sp.TypeDescriptor;
import common.sp.TypeIdentifier;
import common.sp.TypeName;
import common.sp.TypeOrganism;
import common.sp.TypePrimaryId;
import common.sp.TypeRefId;
import common.sp.TypeSPUID;
import generated.Submission;
import generated.TypeAccount;
import generated.TypeFileAttribute;
import generated.TypeFileAttributeRefId;
import generated.TypeInlineData;
import generated.TypeOrganization;
import generated.TypeTargetDb;
import org.metadatacenter.submission.BioProject;
import org.metadatacenter.submission.BioSample;
import org.metadatacenter.submission.CAIRRTemplate;
import org.metadatacenter.submission.SequenceReadArchive;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.UUID;

// TODO Very brittle. Need to do a lot more testing for empty values

/**
 * Convert a CEDAR JSON Schema-based CAIRR template instance into a BioProject/BioSample/SRA XML-based submission.
 */
public class CAIRRTemplateInstance2SRAXMLConverter
{
  final static Logger logger = LoggerFactory.getLogger(CAIRRTemplateInstance2SRAXMLConverter.class);

  private List<String> bioSampleIds = new ArrayList<>();
  private List<String> sraIds = new ArrayList<>();

  /**
   * The {@link CAIRRTemplate} class is generated by jsonschema2pojo from the
   * CAIRRTemplate.json JSON Schema file in the resources directory.
   * <p>
   * See https://github.com/airr-community/airr-standards/blob/master/NCBI_implementation/mapping_MiAIRR_BioProject.tsv
   * for CAIRR BioProject element to NCBI BioProject element mapping.
   * <p>
   * An example BioProject submission can be found here:
   * https://www.ncbi.nlm.nih.gov/viewvc/v1/trunk/submit/public-docs/bioproject/samples/bp.submission.xml?view=markup
   *
   * @param cairrInstance A CAIRR template instance
   * @return A string containing a SRA-conformant XML representation of the supplied CAIRR instance
   * @throws DatatypeConfigurationException If a configuration error occurs during processing
   * @throws JAXBException                  If a JAXB error occurs during processing
   */
  public String convertTemplateInstanceToXML(CAIRRTemplate cairrInstance) throws JAXBException
  {
    final generated.ObjectFactory submissionObjectFactory = new generated.ObjectFactory();
    final common.sp.ObjectFactory ncbiCommonObjectFactory = new common.sp.ObjectFactory();
    final biosample.ObjectFactory bioSampleObjectFactory = new biosample.ObjectFactory();
    final bioproject.ObjectFactory bioProjectObjectFactory = new bioproject.ObjectFactory();

    // This is the NCBI SRA submission. We will generate SRA XML from this submission.
    Submission submission = submissionObjectFactory.createSubmission();

    // Retrieve the BioProject from the CAIRR instance
    BioProject cairrBioProject = cairrInstance.getBioProject();

    String bioProjectID;
    if (cairrBioProject.getStudyID() != null) {
      bioProjectID = cairrBioProject.getStudyID().getValue();
    } else
      bioProjectID = "";

    // Create a NCBI BioProject element
    //TypeProject ncbiBioProject = bioProjectObjectFactory.createTypeProject();

    /*
     * Object construction for the submission <Description> section
     */
    TypeName contactName = ncbiCommonObjectFactory.createTypeName();
    contactName.setFirst(cairrBioProject.getFirstGivenName().getValue());
    contactName.setLast(cairrBioProject.getLastFamilyName().getValue());

    TypeContactInfo contactInfo = ncbiCommonObjectFactory.createTypeContactInfo();
    contactInfo.setEmail(cairrBioProject.getEMail().getValue());
    contactInfo.setName(contactName);

    TypeOrganization.Name organizationName = submissionObjectFactory.createTypeOrganizationName();
    organizationName.setValue(cairrBioProject.getSubmittingOrganization().getValue());

    TypeAccount contactSubmitter = submissionObjectFactory.createTypeAccount();
    contactSubmitter.setUserName(cairrBioProject.getContactInformationCorrespondingAuthorEMail().getValue());

    TypeOrganization contactOrganization = submissionObjectFactory.createTypeOrganization();
    contactOrganization.setType("lab");
    contactOrganization.setRole("owner"); // TODO
    contactOrganization.setName(organizationName);
    contactOrganization.getContact().add(contactInfo);

    Submission.Description submissionDescription = submissionObjectFactory.createSubmissionDescription();
    submissionDescription.setComment("AIRR (myasthenia gravis) data to the NCBI using the CAIRR");
    submissionDescription.setSubmitter(contactSubmitter);
    submissionDescription.getOrganization().add(contactOrganization);
    submission.setDescription(submissionDescription);

    // TODO Other BioProject fields need to be set

    // Retrieve the biosamples from the CAIRR instance
    for (BioSample bioSample : cairrInstance.getBioSample()) {
      // Start <BioSample> section
      TypeBioSample ncbiBioSample = bioSampleObjectFactory.createTypeBioSample();
      ncbiBioSample.setSchemaVersion("2.0"); // XXX: Hard-coded

      // Sample Name (which is actually the sample ID )
      String bioSampleID = bioSample.getSampleName().getValue();
      if (bioSampleID != null) {
        // SampleId
        TypeBioSampleIdentifier.SPUID spuid = bioSampleObjectFactory.createTypeBioSampleIdentifierSPUID();
        spuid.setSpuidNamespace("CEDAR");
        spuid.setValue(bioSampleID);

        TypeBioSampleIdentifier sampleID = bioSampleObjectFactory.createTypeBioSampleIdentifier();
        sampleID.getSPUID().add(spuid);

        ncbiBioSample.setSampleId(sampleID);
      }

      // Descriptor
      JAXBElement descriptionElement = new JAXBElement(new QName("p"), String.class,
        "AIRR (myasthenia gravis) data to the NCBI using the CAIRR");

      TypeBlock sampleDescription = ncbiCommonObjectFactory.createTypeBlock();
      sampleDescription.getPOrUlOrOl().add(descriptionElement);

      TypeDescriptor sampleDescriptor = ncbiCommonObjectFactory.createTypeDescriptor();
      sampleDescriptor.setTitle("AIRR (myasthenia gravis) data to the NCBI using the CAIRR"); // XXX: Hard-coded due
      // to no corresponding entry in the AIRR instance
      sampleDescriptor.setDescription(sampleDescription);

      ncbiBioSample.setDescriptor(sampleDescriptor);

      // Organism
      TypeOrganism sampleOrganism = ncbiCommonObjectFactory.createTypeOrganism();
      sampleOrganism.setOrganismName("Homo sapiens"); // TODO

      ncbiBioSample.setOrganism(sampleOrganism);

      // Package
      ncbiBioSample.setPackage("Human.1.0"); // TODO

      // Attributes
      TypeBioSample.Attributes bioSampleAttributes = bioSampleObjectFactory.createTypeBioSampleAttributes();

      // Following are the CAIRR BioSample Elements/attributes

      // Subject ID
      String subjectIdValue = bioSample.getSubjectId().getValue();
      if (subjectIdValue != null && !subjectIdValue.isEmpty()) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SubjectId");
        attribute.setValue(subjectIdValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Synthetic Library
      if (bioSample.getSyntheticLibrary() != null) {
        String syntheticLibraryValue = bioSample.getSyntheticLibrary().getValue();
        if (syntheticLibraryValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("SyntheticLibrary");
          attribute.setValue(syntheticLibraryValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Organism
      if (bioSample.getOrganism() != null && bioSample.getOrganism().getId() != null) {
        String organismValue = bioSample.getOrganism().getId().toString();
        if (organismValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("Organism");
          attribute.setValue(organismValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }
      // Sex
      if (bioSample.getSex() != null) {
        String sexValue = bioSample.getSex().getValue();
        if (sexValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("Sex");
          attribute.setValue(sexValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Age
      if (bioSample.getAge() != null) {
        String ageValue = bioSample.getAge().getValue();
        if (ageValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("Age");
          attribute.setValue(ageValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Age Event
      if (bioSample.getAgeEvent() != null) {
        String ageEventValue = bioSample.getAgeEvent().getValue();
        if (ageEventValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("AgeEvent");
          attribute.setValue(ageEventValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Ancestry Population
      if (bioSample.getAncestryPopulation() != null) {
        String ancestryPopulationValue = bioSample.getAncestryPopulation().getValue();
        if (ancestryPopulationValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("AncestryPopulation");
          attribute.setValue(ancestryPopulationValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Ethnicity
      if (bioSample.getEthnicity() != null) {
        String ethnicityValue = bioSample.getEthnicity().getValue();
        if (ethnicityValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("Ethnicity");
          attribute.setValue(ethnicityValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Race
      if (bioSample.getRace() != null) {
        String raceValue = bioSample.getRace().getValue();
        if (raceValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("Race");
          attribute.setValue(raceValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Strain Name
      if (bioSample.getStrainName() != null) {
        String strainNameValue = bioSample.getStrainName().getValue();
        if (strainNameValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("StrainName");
          attribute.setValue(strainNameValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Relation to other Subject
      if (bioSample.getRelationToOtherSubject() != null) {
        String relationToOtherSubjectValue = bioSample.getRelationToOtherSubject().getValue();
        if (relationToOtherSubjectValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("RelationToOtherSubject");
          attribute.setValue(relationToOtherSubjectValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Relation Type
      String relationTypeValue = bioSample.getRelationType().getValue();
      if (relationTypeValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("RelationType");
        attribute.setValue(relationTypeValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Projected Release Date
      String projectedReleaseDateValue = bioSample.getProjectedReleaseDate().getValue();
      if (projectedReleaseDateValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("ProjectedReleaseDate");
        attribute.setValue(projectedReleaseDateValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }
      // Isolate
      String isolateValue = bioSample.getIsolate().getValue();
      if (isolateValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Isolate");
        attribute.setValue(isolateValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Diagnosis
      if (bioSample.getDiagnosis() != null) {
        String diagnosisValue = bioSample.getDiagnosis().getValue();
        if (diagnosisValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("Diagnosis");
          attribute.setValue(diagnosisValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Study Group Description
      String studyGroupDescriptionValue = bioSample.getStudyGroupDescription().getValue();
      if (studyGroupDescriptionValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("StudyGroupDescription");
        attribute.setValue(studyGroupDescriptionValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Length of Disease
      String lengthOfDiseaseValue = bioSample.getLengthOfDisease().getValue();
      if (lengthOfDiseaseValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("LengthOfDisease");
        attribute.setValue(lengthOfDiseaseValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Disease Stage
      String diseaseStageValue = bioSample.getDiseaseStage().getValue();
      if (diseaseStageValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("DiseaseStage");
        attribute.setValue(diseaseStageValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Prior Therapies For Primary Disease Under Study
      String priorTherapiesForPrimaryDiseaseUnderStudyValue = bioSample.getPriorTherapiesForPrimaryDiseaseUnderStudy()
        .getValue();
      if (priorTherapiesForPrimaryDiseaseUnderStudyValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("PriorTherapiesForPrimaryDiseaseUnderStudy");
        attribute.setValue(priorTherapiesForPrimaryDiseaseUnderStudyValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Immunogen
      String immunogenValue = bioSample.getImmunogen().getValue();
      if (immunogenValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Immunogen");
        attribute.setValue(immunogenValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Intervention Definition
      String interventionDefinitionValue = bioSample.getInterventionDefinition().getValue();
      if (interventionDefinitionValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("InterventionDefinition");
        attribute.setValue(interventionDefinitionValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Other Relevant Medical History
      String otherRelevantMedicalHistoryValue = bioSample.getOtherRelevantMedicalHistory().getValue();
      if (otherRelevantMedicalHistoryValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("OtherRelevantMedicalHistory");
        attribute.setValue(otherRelevantMedicalHistoryValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Sample Type
      String sampleTypeValue = bioSample.getSampleType().getValue();
      if (sampleTypeValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SampleType");
        attribute.setValue(sampleTypeValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }
      // Tissue
      if (bioSample.getTissue() != null && bioSample.getTissue().getId() != null) {
        String tissueValue = bioSample.getTissue().getId().toString();
        if (tissueValue != null) {
          TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
          attribute.setAttributeName("Tissue");
          attribute.setValue(tissueValue);
          bioSampleAttributes.getAttribute().add(attribute);
        }
      }

      // Anatomic Site
      String anatomicSiteValue = bioSample.getAnatomicSite().getValue();
      if (anatomicSiteValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("AnatomicSite");
        attribute.setValue(anatomicSiteValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }
      // Disease State of Sample
      String diseaseStateOfSample1value = bioSample.getDiseaseStateOfSample().getValue();
      if (diseaseStateOfSample1value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("DiseaseStateOfSample1");
        attribute.setValue(diseaseStateOfSample1value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Sample Collection Time
      String sampleCollectionTime1Value = bioSample.getSampleCollectionTime().getValue();
      if (sampleCollectionTime1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SampleCollectionTime1");
        attribute.setValue(sampleCollectionTime1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Collection Time Event T01
      String collectionTimeEventT01Value = bioSample.getCollectionTimeEventT0().getValue();
      if (collectionTimeEventT01Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CollectionTimeEventT01");
        attribute.setValue(collectionTimeEventT01Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Biomaterial Provider
      String biomaterialProviderValue = bioSample.getBiomaterialProvider().getValue();
      if (biomaterialProviderValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("BiomaterialProvider");
        attribute.setValue(biomaterialProviderValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Geolocation Name
      String geolocationNameValue = bioSample.getGeolocationName().getValue();
      if (geolocationNameValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("GeolocationName");
        attribute.setValue(geolocationNameValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Tissue Processing
      String tissueProcessingValue = bioSample.getTissueProcessing().getValue();
      if (tissueProcessingValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("TissueProcessing");
        attribute.setValue(tissueProcessingValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Cell Subset
      String cellSubsetValue = bioSample.getCellSubsetPhenotype().getValue();
      if (cellSubsetValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellSubset");
        attribute.setValue(cellSubsetValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Cell Subset Phenotype
      String cellSubsetPhenotypeValue = bioSample.getCellSubsetPhenotype().getValue();
      if (cellSubsetPhenotypeValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellSubsetPhenotype");
        attribute.setValue(cellSubsetPhenotypeValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Single-cell Sort
      String singleCellSortValue = bioSample.getSingleCellSort().getValue();
      if (singleCellSortValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SingleCellSort");
        attribute.setValue(singleCellSortValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Number of Cells in Experiment
      String numberOfCellsInExperiment1Value = bioSample.getNumberOfCellsInExperiment().getValue();
      if (numberOfCellsInExperiment1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("NumberOfCellsInExperiment");
        attribute.setValue(numberOfCellsInExperiment1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Number of Cells per Sequencing Reaction1
      String numberOfCellsPerSequencingReaction1Value = bioSample.getNumberOfCellsPerSequencingReaction().getValue();
      if (numberOfCellsPerSequencingReaction1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("NumberOfCellsPerSequencingReaction");
        attribute.setValue(numberOfCellsPerSequencingReaction1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Cell Storage
      String cellStorage1Value = bioSample.getCellStorage().getValue();
      if (cellStorage1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellStorage");
        attribute.setValue(cellStorage1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Cell Quality
      String cellQualityValue = bioSample.getCellQuality().getValue();
      if (cellQualityValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellQuality");
        attribute.setValue(cellQualityValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Cell Isolation
      String cellIsolationValue = bioSample.getCellIsolation().getValue();
      if (cellIsolationValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellIsolation");
        attribute.setValue(cellIsolationValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Processing Protocol
      String processingProtocolValue = bioSample.getProcessingProtocol().getValue();
      if (processingProtocolValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("ProcessingProtocol");
        attribute.setValue(processingProtocolValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      ncbiBioSample.setAttributes(bioSampleAttributes);

      // XmlContent
      // Development Note: The original NCBI submission doesn't include the BioSample element, so it
      // is required to append the rule in the submission.xsd file (See submission.xsd:441)
      TypeInlineData.XmlContent xmlContent = submissionObjectFactory.createTypeInlineDataXmlContent();
      xmlContent.setBioSample(ncbiBioSample);

      // Data
      Submission.Action.AddData.Data bioSampleData = submissionObjectFactory.createSubmissionActionAddDataData();
      bioSampleData.setContentType("XML");
      bioSampleData.setXmlContent(xmlContent);

      // Identifier
      TypeSPUID bioSampleSpuid = ncbiCommonObjectFactory.createTypeSPUID();
      bioSampleSpuid.setSpuidNamespace("CEDAR");
      bioSampleSpuid.setValue(createNewActionId());

      TypeIdentifier actionIdentifier = ncbiCommonObjectFactory.createTypeIdentifier();
      actionIdentifier.setSPUID(bioSampleSpuid);

      // AddData
      Submission.Action.AddData bioSampleAddData = submissionObjectFactory.createSubmissionActionAddData();
      bioSampleAddData.setTargetDb(TypeTargetDb.BIO_SAMPLE);
      bioSampleAddData.setData(bioSampleData);
      bioSampleAddData.setIdentifier(actionIdentifier);

      // Action
      Submission.Action bioSampleAction = submissionObjectFactory.createSubmissionAction();
      bioSampleAction.setAddData(bioSampleAddData);

      submission.getAction().add(bioSampleAction);
    }

    // Retrieve the SRAs from the CAIRR instance
    int sraIndex = 0; // to track the corresponding BioSample record for this SRA entry
    for (SequenceReadArchive sequenceReadArchive : cairrInstance.getSequenceReadArchive()) {
      // AddFiles
      Submission.Action.AddFiles sraAddFiles = submissionObjectFactory.createSubmissionActionAddFiles();
      sraAddFiles.setTargetDb(TypeTargetDb.SRA);

      if (sequenceReadArchive.getFileType() != null) {
        String fileType = sequenceReadArchive.getFileType().getValue();

        List<String> fileAttributeNames = sequenceReadArchive.getFilename();
        Map<String, Object> additionalProperties = sequenceReadArchive.getAdditionalProperties();

        for (String fileAttributeName : fileAttributeNames) {
          if (additionalProperties.containsKey(fileAttributeName)) {
            logger.info(
              "attribte " + fileAttributeName + " object " + additionalProperties.get(fileAttributeName).getClass());
            Map<String, Object> fileNameObject = (Map<String, Object>)additionalProperties.get(fileAttributeName);

            if (fileNameObject.containsKey("@value")) {
              String fileName = fileNameObject.get("@value").toString();
              if (fileName != null || fileType != null) {
                Submission.Action.AddFiles.File sraFile = submissionObjectFactory.createSubmissionActionAddFilesFile();
                sraFile.setFilePath(fileName);
                sraFile.setDataType(fileType);
                sraAddFiles.getFile().add(sraFile);

              }
            }
          }
        }
      }

      // Sample Name (ID of BioSample)

      String bioSampleID = sequenceReadArchive.getSampleName().getValue();
      if (bioSampleID != null) {
        TypeFileAttributeRefId bioSampleAttributeRefId = submissionObjectFactory.createTypeFileAttributeRefId();
        bioSampleAttributeRefId.setName("BioSample");
        TypeRefId refId = ncbiCommonObjectFactory.createTypeRefId();
        TypePrimaryId primaryId = ncbiCommonObjectFactory.createTypePrimaryId();
        primaryId.setDb("BioSample");
        primaryId.setValue(bioSampleID);
        refId.setPrimaryId(primaryId);
        bioSampleAttributeRefId.setRefId(refId);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(bioSampleAttributeRefId);
      }

      // BioProject ID

      if (!bioProjectID.isEmpty()) {
        TypeFileAttributeRefId bioProjectAttributeRefId = submissionObjectFactory.createTypeFileAttributeRefId();
        bioProjectAttributeRefId.setName("BioProject");
        TypeRefId refId = ncbiCommonObjectFactory.createTypeRefId();
        TypePrimaryId primaryId = ncbiCommonObjectFactory.createTypePrimaryId();
        primaryId.setDb("BioProject");
        primaryId.setValue(bioProjectID);
        refId.setPrimaryId(primaryId);
        bioProjectAttributeRefId.setRefId(refId);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(bioProjectAttributeRefId);
      }

      // library ID

      String libraryIDValue = sequenceReadArchive.getLibraryID().getValue();
      if (libraryIDValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_id");
        fileAttribute.setValue(libraryIDValue);
        // TODO Remove for testing sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // library + sequencing strategy + layout + instrument model must be unique according to
      // https://www.ncbi.nlm.nih.gov/sra/docs/submitmeta/

      String instrumentModelValue = sequenceReadArchive.getSequencingPlatform().getValue();
      if (instrumentModelValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("instrument_model");
        fileAttribute.setValue(instrumentModelValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Name

      String libraryNameValue = sequenceReadArchive.getLibraryName().getValue();
      if (libraryNameValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_name");
        fileAttribute.setValue(libraryNameValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Strategy - controlled

      String LibraryStrategyValue = sequenceReadArchive.getLibraryStrategy().getValue();
      if (LibraryStrategyValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_strategy");
        fileAttribute.setValue(LibraryStrategyValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Source - controlled

      String librarySourceValue = sequenceReadArchive.getLibrarySource().getValue();
      if (librarySourceValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_source");
        fileAttribute.setValue(librarySourceValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Selection - controlled

      String librarySelectionValue = sequenceReadArchive.getLibrarySelection().getValue();
      if (librarySelectionValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_selection");
        fileAttribute.setValue(librarySelectionValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Layout - controlled

      String libraryLayoutValue = sequenceReadArchive.getLibraryLayout().getValue();
      if (libraryLayoutValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_layout");
        fileAttribute.setValue(libraryLayoutValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Construction Protocol

      String libraryConstructionProtocolValue = sequenceReadArchive.getLibraryConstructionProtocol().getValue();
      if (libraryConstructionProtocolValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_construction_protocol");
        fileAttribute.setValue(libraryConstructionProtocolValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      /*
      // Library instrument

      String LibraryInstrumentValue = sequenceReadArchive.getLibraryInstrument().getValue();
      if (LibraryInstrumentValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_instrument");
        fileAttribute.setValue(LibraryInstrumentValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Design Description

      String designDescriptionValue = sequenceReadArchive.getDesignDescription().getValue();
      if (designDescriptionValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("design_description");
        fileAttribute.setValue(designDescriptionValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Target Substrate

      String targetSubstrateValue = sequenceReadArchive.getTargetSubstrate().getValue();
      if (targetSubstrateValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("target_substrate");
        fileAttribute.setValue(targetSubstrateValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Target Substrate Quality

      String targetSubstrateQualityValue = sequenceReadArchive.getTargetSubstrateQuality().getValue();
      if (targetSubstrateQualityValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("target_substrate_quality");
        fileAttribute.setValue(targetSubstrateQualityValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Generation Method

      String libraryGenerationMethodValue = sequenceReadArchive.getLibraryGenerationMethod().getValue();
      if (libraryGenerationMethodValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_generation_method");
        fileAttribute.setValue(libraryGenerationMethodValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Generation Protocol

      String libraryGenerationProtocolValue = sequenceReadArchive.getLibraryGenerationProtocol().getValue();
      if (libraryGenerationProtocolValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("library_generation_protocol");
        fileAttribute.setValue(libraryGenerationProtocolValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Target Locus for PCR

      String TargetLocusForPCRValue = sequenceReadArchive.getTargetLocusForPCR().getValue();
      if (TargetLocusForPCRValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("target_locus_for_pcr");
        fileAttribute.setValue(TargetLocusForPCRValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Forward PCR Primer Target Location

      String forwardPCRPrimerTargetLocationValue = sequenceReadArchive.getForwardPCRPrimerTargetLocation().getValue();
      if (forwardPCRPrimerTargetLocationValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("forward_pcr_primer_target_location");
        fileAttribute.setValue(forwardPCRPrimerTargetLocationValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Reverse PCR Primer Target Location

      String reversePCRPrimerTargetLocationValue = sequenceReadArchive.getReversePCRPrimerTargetLocation().getValue();
      if (reversePCRPrimerTargetLocationValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("reverse_pcr_primer_target_location");
        fileAttribute.setValue(reversePCRPrimerTargetLocationValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Complete Sequence

      String completeSequenceValue = sequenceReadArchive.getCompleteSequence().getValue();
      if (completeSequenceValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("complete_sequence");
        fileAttribute.setValue(completeSequenceValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Physical Linkage of Different Loci

      String physicalLinkageOfDifferentLociValue = sequenceReadArchive.getPhysicalLinkageOfDifferentLoci().getValue();
      if (physicalLinkageOfDifferentLociValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("physical_linkage_of_different_loci");
        fileAttribute.setValue(physicalLinkageOfDifferentLociValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Template Amount

      String TemplateAmountValue = sequenceReadArchive.getTemplateAmount().getValue();
      if (TemplateAmountValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("template_amount");
        fileAttribute.setValue(TemplateAmountValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Total Reads Passing QC Filter

      String totalReadsPassingQCFilterValue = sequenceReadArchive.getTotalReadsPassingQCFilter().getValue();
      if (totalReadsPassingQCFilterValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("total_reads_passing_qc_filter");
        fileAttribute.setValue(totalReadsPassingQCFilterValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Protocol ID

      String protocolIDValue = sequenceReadArchive.getProtocolID().getValue();
      if (protocolIDValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("protocol_id");
        fileAttribute.setValue(protocolIDValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Sequencing Platform

      String sequencingPlatformValue = sequenceReadArchive.getSequencingPlatform().getValue();
      if (sequencingPlatformValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("sequencing_platform");
        fileAttribute.setValue(sequencingPlatformValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Sequencing Read Lengths

      String readLengthsValue = sequenceReadArchive.getReadLengths().getValue();
      if (readLengthsValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("read_lengths");
        fileAttribute.setValue(readLengthsValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Sequencing Facility

      String sequencingFacilityValue = sequenceReadArchive.getSequencingFacility().getValue();
      if (sequencingFacilityValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("sequencing_facility");
        fileAttribute.setValue(sequencingFacilityValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Batch Number

      String batchNumberValue = sequenceReadArchive.getBatchNumber().getValue();
      if (batchNumberValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("batch_number");
        fileAttribute.setValue(batchNumberValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Date of Sequencing Run

      String dateOfSequencingRunValue = sequenceReadArchive.getDateOfSequencingRun().getValue();
      if (dateOfSequencingRunValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("date_of_sequencing_run");
        fileAttribute.setValue(dateOfSequencingRunValue);
        // TODO Possible date format issue
        //sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Sequencing Kit
      String sequencingKitValue = sequenceReadArchive.getSequencingKit().getValue();
      if (sequencingKitValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("sequencing_kit");
        fileAttribute.setValue(sequencingKitValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }
      */

      // End of AIRR SRA Elements

      TypeSPUID sraSampleSpuid = ncbiCommonObjectFactory.createTypeSPUID();
      sraSampleSpuid.setSpuidNamespace("CEDAR");
      sraSampleSpuid.setValue(createNewSraId());

      TypeIdentifier sraIdentifier = ncbiCommonObjectFactory.createTypeIdentifier();
      sraIdentifier.setSPUID(sraSampleSpuid);

      sraAddFiles.setIdentifier(sraIdentifier);

      // Action
      Submission.Action sraAction = submissionObjectFactory.createSubmissionAction();
      sraAction.setAddFiles(sraAddFiles);

      submission.getAction().add(sraAction);

      sraIndex++; // increment the index counter
    }

    // Generate XML from the submission instance
    StringWriter writer = new StringWriter();
    JAXBContext ctx = JAXBContext.newInstance(Submission.class);
    Marshaller marshaller = ctx.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
    marshaller.marshal(submission, writer);

    return writer.toString();
  }

  private XMLGregorianCalendar createXMLGregorianCalendar(String date) throws DatatypeConfigurationException
  {
    DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
    GregorianCalendar gc = new GregorianCalendar();

    return datatypeFactory.newXMLGregorianCalendar(gc);
  }

  private String createNewSraId()
  {
    String id = "SRA-" + UUID.randomUUID();
    sraIds.add(id);
    return id;
  }

  private String createNewActionId()
  {
    String id = "Action-" + UUID.randomUUID();
    sraIds.add(id);
    return id;
  }
}
