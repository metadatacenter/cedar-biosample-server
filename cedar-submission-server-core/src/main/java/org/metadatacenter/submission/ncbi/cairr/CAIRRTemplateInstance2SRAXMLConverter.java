package org.metadatacenter.submission.ncbi.cairr;

import biosample.TypeAttribute;
import biosample.TypeBioSample;
import biosample.TypeBioSampleIdentifier;
import common.sp.TypeBlock;
import common.sp.TypeContactInfo;
import common.sp.TypeDescriptor;
import common.sp.TypeIdentifier;
import common.sp.TypeLocalId;
import common.sp.TypeName;
import common.sp.TypeOrganism;
import common.sp.TypeSPUID;
import generated.Submission;
import generated.TypeAccount;
import generated.TypeFileAttribute;
import generated.TypeInlineData;
import generated.TypeOrganization;
import generated.TypeTargetDb;
import org.metadatacenter.submission.*;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import java.io.StringWriter;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.UUID;

// TODO Very brittle. Need to do a lot more testing for empty values

/**
 * Convert a CEDAR JSON Schema-based CAIRR template instance into a BioProject/BioSample/SRA XML-based submission.
 */
public class CAIRRTemplateInstance2SRAXMLConverter {
  private List<String> bioSampleIds = new ArrayList<>();
  private List<String> sraIds = new ArrayList<>();

  /**
   * The {@link CAIRRTemplate} class is generated by jsonschema2pojo from the
   * CAIRRTemplate.json JSON Schema file in the resources directory.
   *
   * @param cairrInstance A CAIRR template instance
   * @return A string containing a SRA-conformant XML representation of the supplied CAIRR instance
   * @throws DatatypeConfigurationException If a configuration error occurs during processing
   * @throws JAXBException                  If a JAXB error occurs during processing
   */
  public String convertTemplateInstanceToXML(CAIRRTemplate cairrInstance)
      throws DatatypeConfigurationException, JAXBException {
    final generated.ObjectFactory submissionObjectFactory = new generated.ObjectFactory();
    final common.sp.ObjectFactory spCommonObjectFactory = new common.sp.ObjectFactory();
    final biosample.ObjectFactory bioSampleObjectFactory = new biosample.ObjectFactory();

    // This is the NCBI SRA submission. We will generate SRA XML from this submission.
    Submission submission = submissionObjectFactory.createSubmission();

    // Retrieve the BioProject from the CAIRR instance
    BioProject bioProject = cairrInstance.getBioProject();

    /*
     * Object construction for the submission <Description> section
     */
    TypeName contactName = spCommonObjectFactory.createTypeName();
    contactName.setFirst(bioProject.getFirstGivenName1().getValue());
    contactName.setLast(bioProject.getLastFamilyName1().getValue());

    TypeContactInfo contactInfo = spCommonObjectFactory.createTypeContactInfo();
    contactInfo.setEmail(bioProject.getEMail1().getValue());
    contactInfo.setName(contactName);

    TypeOrganization.Name organizationName = submissionObjectFactory.createTypeOrganizationName();
    organizationName.setValue(bioProject.getSubmittingOrganization1().getValue());

    TypeAccount contactSubmitter = submissionObjectFactory.createTypeAccount();
    contactSubmitter.setUserName("ahmadchan@gmail.com"); // TODO

    TypeOrganization contactOrganization = submissionObjectFactory.createTypeOrganization();
    contactOrganization.setType("Academia"); // TODO
    contactOrganization.setRole("Data submitter"); // TODO
    contactOrganization.setName(organizationName);
    contactOrganization.getContact().add(contactInfo);

    Submission.Description submissionDescription = submissionObjectFactory.createSubmissionDescription();
    submissionDescription.setComment("AIRR (myasthenia gravis) data to the NCBI using the CAIRR"); // TODO
    submissionDescription.setSubmitter(contactSubmitter);
    submissionDescription.getOrganization().add(contactOrganization);
    submission.setDescription(submissionDescription);

    // TODO Other BioProject fields need to be set

    // Retrieve the biosamples from the CAIRR instance
    for (BioSample bioSample : cairrInstance.getBioSample()) {
      // Start <BioSample> section
      TypeBioSample ncbiBioSample = bioSampleObjectFactory.createTypeBioSample();
      ncbiBioSample.setSchemaVersion("2.0"); // XXX: Hard-coded

      // SampleId
      String bioSampleId = createNewBioSampleId();
      TypeBioSampleIdentifier.SPUID spuid = bioSampleObjectFactory.createTypeBioSampleIdentifierSPUID();
      spuid.setSpuidNamespace("CEDAR"); // TODO
      spuid.setValue(bioSampleId);

      TypeBioSampleIdentifier sampleID = bioSampleObjectFactory.createTypeBioSampleIdentifier();
      sampleID.getSPUID().add(spuid);

      ncbiBioSample.setSampleId(sampleID);

      // Descriptor
      JAXBElement descriptionElement = new JAXBElement(new QName("p"), String.class, "AIRR (myasthenia gravis) data " +
          "to the NCBI using the CAIRR"); // TODO

      TypeBlock sampleDescription = spCommonObjectFactory.createTypeBlock();
      sampleDescription.getPOrUlOrOl().add(descriptionElement);

      TypeDescriptor sampleDescriptor = spCommonObjectFactory.createTypeDescriptor();
      sampleDescriptor.setTitle("AIRR (myasthenia gravis) data to the NCBI using the CAIRR"); // XXX: Hard-coded due
      // to no corresponding entry in
      // the AIRR instance
      sampleDescriptor.setDescription(sampleDescription);

      ncbiBioSample.setDescriptor(sampleDescriptor);

      // Organism
      TypeOrganism sampleOrganism = spCommonObjectFactory.createTypeOrganism();
      sampleOrganism.setOrganismName("Homo sapiens"); // TODO

      ncbiBioSample.setOrganism(sampleOrganism);

      // Package
      ncbiBioSample.setPackage("Human.1.0"); // TODO

      // Attributes
      TypeBioSample.Attributes bioSampleAttributes = bioSampleObjectFactory.createTypeBioSampleAttributes();


      // Following are the AIRR BioSample Elements/attrubites

      // Subject ID
      String SubjectIdValue = bioSample.getSubjectId().getValue();
      if (SubjectIdValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SubjectId");
        attribute.setValue(SubjectIdValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Synthetic Library
      String SyntheticLibraryValue = ((TypeAttribute) bioSample.getSyntheticLibrary()).getValue();
      if (SyntheticLibraryValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SyntheticLibrary");
        attribute.setValue(SyntheticLibraryValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Organism
      String OrganismValue = bioSample.getOrganism().toString();
      if (OrganismValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Organism");
        attribute.setValue(OrganismValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }


      // Sex
      String SexValue = bioSample.getSex().getValue();
      if (SexValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Sex");
        attribute.setValue(SexValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Age
      String AgeValue = bioSample.getAge().getValue();
      if (AgeValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Age");
        attribute.setValue(AgeValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Age Event
      String AgeEventValue = bioSample.getAgeEvent().getValue();
      if (AgeEventValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("AgeEvent");
        attribute.setValue(AgeEventValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }


      // Ancestry Population
      String AncestryPopulationValue = bioSample.getAncestryPopulation().getValue();
      if (AncestryPopulationValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("AncestryPopulation");
        attribute.setValue(AncestryPopulationValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }


      // Ethnicity
      String EthnicityValue = bioSample.getEthnicity().getValue();
      if (EthnicityValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Ethnicity");
        attribute.setValue(EthnicityValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Race
      String RaceValue = bioSample.getRace().getValue();
      if (RaceValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Race");
        attribute.setValue(RaceValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // StarinName
      String StarinNameValue = bioSample.getStarinName().getValue();
      if (StarinNameValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("StarinName");
        attribute.setValue(StarinNameValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }


      // Relation to other Subject
      String RelationToOtherSubject1Value = bioSample.getRelationToOtherSubject1().getValue();
      if (RelationToOtherSubject1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("RelationToOtherSubject1");
        attribute.setValue(RelationToOtherSubject1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Relation Type
      String RelationType1Value = bioSample.getRelationType1().getValue();
      if (RelationType1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("RelationType1");
        attribute.setValue(RelationType1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }


      // Projected Release Date
      String ProjectedReleaseDate1Value = bioSample.getProjectedReleaseDate1().getValue();
      if (ProjectedReleaseDate1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("ProjectedReleaseDate1");
        attribute.setValue(ProjectedReleaseDate1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }
      // Isolate
      String IsolateValue = bioSample.getIsolate().getValue();
      if (IsolateValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Isolate");
        attribute.setValue(IsolateValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Diagnosis
      String Diagnosis2Value = bioSample.getDiagnosis2().toString();
      if (Diagnosis2Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Diagnosis2");
        attribute.setValue(Diagnosis2Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }
      // StudyGroupDescription
      String StudyGroupDescriptionValue = bioSample.getStudyGroupDescription().getValue();
      if (StudyGroupDescriptionValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("StudyGroupDescription");
        attribute.setValue(StudyGroupDescriptionValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Length of Disease
      String LengthOfDiseaseValue = bioSample.getLengthOfDisease().getValue();
      if (LengthOfDiseaseValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("LengthOfDisease");
        attribute.setValue(LengthOfDiseaseValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Disease stage
      String DiseaseStageValue = bioSample.getDiseaseStage().getValue();
      if (DiseaseStageValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("DiseaseStage");
        attribute.setValue(DiseaseStageValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Prior Therapies For Primary Disease Under Study
      String PriorTherapiesForPrimaryDiseaseUnderStudyValue = bioSample.getPriorTherapiesForPrimaryDiseaseUnderStudy
          ().getValue();
      if (PriorTherapiesForPrimaryDiseaseUnderStudyValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("PriorTherapiesForPrimaryDiseaseUnderStudy");
        attribute.setValue(PriorTherapiesForPrimaryDiseaseUnderStudyValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }


      // Immunogen
      String ImmunogenValue = bioSample.getImmunogen().getValue();
      if (ImmunogenValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Immunogen");
        attribute.setValue(ImmunogenValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Intervention Definition
      String InterventionDefinitionValue = bioSample.getInterventionDefinition().getValue();
      if (InterventionDefinitionValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("InterventionDefinition");
        attribute.setValue(InterventionDefinitionValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Other Relevant Medical History
      String OtherRelevantMedicalHistoryValue = bioSample.getOtherRelevantMedicalHistory().getValue();
      if (OtherRelevantMedicalHistoryValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("OtherRelevantMedicalHistory");
        attribute.setValue(OtherRelevantMedicalHistoryValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Sample Name
      String SampleNameValue = bioSample.getSampleName().getValue();
      if (SampleNameValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SampleName");
        attribute.setValue(SampleNameValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Sample Type
      String SampleTypeValue = bioSample.getSampleType().getValue();
      if (SampleTypeValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SampleType");
        attribute.setValue(SampleTypeValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }
      // Tissue
      String TissueValue = bioSample.getTissue().toString();
      if (TissueValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("Tissue");
        attribute.setValue(TissueValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Anatomic Site
      String AnatomicSiteValue = bioSample.getAnatomicSite().getValue();
      if (AnatomicSiteValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("AnatomicSite");
        attribute.setValue(AnatomicSiteValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }
      // Disease State of Sample
      String DiseaseStateOfSample1value = bioSample.getDiseaseStateOfSample1().getValue();
      if (DiseaseStateOfSample1value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("DiseaseStateOfSample1");
        attribute.setValue(DiseaseStateOfSample1value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Sample Collection Time
      String SampleCollectionTime1Value = bioSample.getSampleCollectionTime1().getValue();
      if (SampleCollectionTime1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SampleCollectionTime1");
        attribute.setValue(SampleCollectionTime1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Collection Time Event T01
      String CollectionTimeEventT01Value = bioSample.getCollectionTimeEventT01().getValue();
      if (CollectionTimeEventT01Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CollectionTimeEventT01");
        attribute.setValue(CollectionTimeEventT01Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Biomaterial Provider
      String BiomaterialProviderValue = bioSample.getBiomaterialProvider().getValue();
      if (BiomaterialProviderValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("BiomaterialProvider");
        attribute.setValue(BiomaterialProviderValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Geolocation Name
      String GeolocationNameValue = bioSample.getGeolocationName().getValue();
      if (GeolocationNameValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("GeolocationName");
        attribute.setValue(GeolocationNameValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Tissue Processing
      String TissueProcessingValue = bioSample.getTissueProcessing().getValue();
      if (TissueProcessingValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("TissueProcessing");
        attribute.setValue(TissueProcessingValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Cell Subset
      String CellSubsetValue = bioSample.getCellSubset().toString();
      if (CellSubsetValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellSubset");
        attribute.setValue(CellSubsetValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Cell Subset Phenotype
      String CellSubsetPhenotypeValue = bioSample.getCellSubsetPhenotype().getValue();
      if (CellSubsetPhenotypeValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellSubsetPhenotype");
        attribute.setValue(CellSubsetPhenotypeValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Single-cell Sort
      String SingleCellSort1Value = bioSample.getSingleCellSort1().getValue();
      if (SingleCellSort1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("SingleCellSort1");
        attribute.setValue(SingleCellSort1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Number of Cells in Experiment
      String NumberOfCellsInExperiment1Value = bioSample.getNumberOfCellsInExperiment1().getValue();
      if (NumberOfCellsInExperiment1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("NumberOfCellsInExperiment1");
        attribute.setValue(NumberOfCellsInExperiment1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Number of Cells per Sequencing Reaction1
      String NumberOfCellsPerSequencingReaction1Value = bioSample.getNumberOfCellsPerSequencingReaction1().getValue();
      if (NumberOfCellsPerSequencingReaction1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("NumberOfCellsPerSequencingReaction1");
        attribute.setValue(NumberOfCellsPerSequencingReaction1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }


      // Cell Storage1
      String CellStorage1Value = bioSample.getCellStorage1().getValue();
      if (CellStorage1Value != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellStorage1");
        attribute.setValue(CellStorage1Value);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Cell Quality
      String CellQualityValue = bioSample.getCellQuality().getValue();
      if (CellQualityValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellQuality");
        attribute.setValue(CellQualityValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Cell Isolation
      String CellIsolationValue = bioSample.getCellIsolation().getValue();
      if (CellIsolationValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("CellIsolation");
        attribute.setValue(CellIsolationValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }

      // Processing Protocol
      String ProcessingProtocolValue = bioSample.getProcessingProtocol().getValue();
      if (ProcessingProtocolValue != null) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName("ProcessingProtocol");
        attribute.setValue(ProcessingProtocolValue);
        bioSampleAttributes.getAttribute().add(attribute);
      }


      // Optional attributes
      for (OptionalBioSampleAttribute optionalAttribute : bioSample.getOptionalBioSampleAttribute()) {
        TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
        attribute.setAttributeName(optionalAttribute.getName().getValue());
        attribute.setValue(optionalAttribute.getValue().getValue());
        bioSampleAttributes.getAttribute().add(attribute);
      }

      ncbiBioSample.setAttributes(bioSampleAttributes);

      // XmlContent
      // Developement Note: The original NCBI submission doesn't includ the BioSample element, so it
      // is required to append the rule in the submission.xsd file (See submission.xsd:441)
      TypeInlineData.XmlContent xmlContent = submissionObjectFactory.createTypeInlineDataXmlContent();
      xmlContent.setBioSample(ncbiBioSample);

      // Data
      Submission.Action.AddData.Data bioSampleData = submissionObjectFactory.createSubmissionActionAddDataData();
      bioSampleData.setContentType("XML"); // TODO
      bioSampleData.setXmlContent(xmlContent);

      // Identifier
      TypeSPUID bioSampleSpuid = spCommonObjectFactory.createTypeSPUID();
      bioSampleSpuid.setSpuidNamespace("CEDAR"); // TODO
      bioSampleSpuid.setValue(bioSampleId);

      TypeIdentifier bioSampleIdentifier = spCommonObjectFactory.createTypeIdentifier();
      bioSampleIdentifier.setSPUID(bioSampleSpuid);

      // AddData
      Submission.Action.AddData bioSampleAddData = submissionObjectFactory.createSubmissionActionAddData();
      bioSampleAddData.setTargetDb(TypeTargetDb.BIO_SAMPLE);
      bioSampleAddData.setData(bioSampleData);
      bioSampleAddData.setIdentifier(bioSampleIdentifier);

      // Action
      Submission.Action bioSampleAction = submissionObjectFactory.createSubmissionAction();
      bioSampleAction.setAddData(bioSampleAddData);

      submission.getAction().add(bioSampleAction);
    }

    // Retrieve the SRAs from the CAIRR instance
    int sraIndex = 0; // to track the corresponding BioSample record for this SRA entry
    for (SequenceReadArchive sequenceReadArchive : cairrInstance.getSequenceReadArchive()) {

      // AddFiles
      Submission.Action.AddFiles sraAddFiles = submissionObjectFactory.createSubmissionActionAddFiles();
      sraAddFiles.setTargetDb(TypeTargetDb.SRA);

      // TODO Process each SRA section


      // File
      for (SRAMultipleFileUploadAttributes1 sraFileUploadAttribute : sequenceReadArchive
          .getSRAMultipleFileUploadAttributes1()) {

        _6d3f0b409f8b40ecB9040186aeba4194 fileName = sraFileUploadAttribute.get6d3f0b409f8b40ecB9040186aeba4194();

        String fileType = sraFileUploadAttribute.getType().toString();


        if (fileName != null && fileType != null) {
          Submission.Action.AddFiles.File sraFile = submissionObjectFactory.createSubmissionActionAddFilesFile();
          sraFile.setFilePath(fileName.toString());
          sraFile.setDataType(fileType.toString());
          sraAddFiles.getFile().add(sraFile);
        }
      }


      // library ID

      String LibraryID1Value = sequenceReadArchive.getLibraryID1().getValue();
      if (LibraryID1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibraryID1");
        fileAttribute.setValue(LibraryID1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Name

      String LibraryName1Value = sequenceReadArchive.getLibraryName1().getValue();
      if (LibraryName1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibraryName1");
        fileAttribute.setValue(LibraryName1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library instruement

      String LibraryInstrument1Value = sequenceReadArchive.getLibraryInstrument1().getValue();
      if (LibraryInstrument1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibraryInstrument");
        fileAttribute.setValue(LibraryInstrument1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Startegy

      String LibraryStrategy1Value = sequenceReadArchive.getLibraryStrategy1().getValue();
      if (LibraryStrategy1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibraryStrategy1");
        fileAttribute.setValue(LibraryStrategy1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


// Library Source

      String LibrarySource1Value = sequenceReadArchive.getLibrarySource1().getValue();
      if (LibrarySource1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibrarySource1");
        fileAttribute.setValue(LibrarySource1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


      // Library Selection

      String LibrarySelection1Value = sequenceReadArchive.getLibrarySelection1().getValue();
      if (LibrarySelection1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibrarySelection1");
        fileAttribute.setValue(LibrarySelection1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Layout

      String LibraryLayout1Value = sequenceReadArchive.getLibraryLayout1().getValue();
      if (LibraryLayout1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibraryLayout1");
        fileAttribute.setValue(LibraryLayout1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }
      // Library Construction Protocol

      String LibraryConstructionProtocol1Value = sequenceReadArchive.getLibraryConstructionProtocol1().getValue();
      if (LibraryConstructionProtocol1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibraryConstructionProtocol1");
        fileAttribute.setValue(LibraryConstructionProtocol1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


      // Design Description

      String DesignDescription1Value = sequenceReadArchive.getDesignDescription1().getValue();
      if (DesignDescription1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("DesignDescription1");
        fileAttribute.setValue(DesignDescription1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


      // Target Substrate

      String TargetSubstrate1Value = sequenceReadArchive.getTargetSubstrate1().getValue();
      if (TargetSubstrate1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("TargetSubstrate1");
        fileAttribute.setValue(TargetSubstrate1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Target Substrate Quality

      String TargetSubstrateQuality1Value = sequenceReadArchive.getTargetSubstrateQuality1().getValue();
      if (TargetSubstrateQuality1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("TargetSubstrateQuality1");
        fileAttribute.setValue(TargetSubstrateQuality1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Generation Method

      String LibraryGenerationMethod1Value = sequenceReadArchive.getLibraryGenerationMethod1().getValue();
      if (LibraryGenerationMethod1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibraryGenerationMethod1");
        fileAttribute.setValue(LibraryGenerationMethod1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Library Generation Protocol

      String LibraryGenerationProtocol1Value = sequenceReadArchive.getLibraryGenerationProtocol1().getValue();
      if (LibraryGenerationProtocol1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("LibraryGenerationProtocol1");
        fileAttribute.setValue(LibraryGenerationProtocol1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Target Locus for PCR

      String TargetLocusForPCRValue = sequenceReadArchive.getTargetLocusForPCR().getValue();
      if (TargetLocusForPCRValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("TargetLocusForPCR");
        fileAttribute.setValue(TargetLocusForPCRValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


      // Forward PCR Primer Target Location

      String ForwardPCRPrimerTargetLocation1Value = sequenceReadArchive.getForwardPCRPrimerTargetLocation1().getValue();
      if (ForwardPCRPrimerTargetLocation1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("ForwardPCRPrimerTargetLocation1");
        fileAttribute.setValue(ForwardPCRPrimerTargetLocation1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Reverse PCR Primer Target Location

      String ReversePCRPrimerTargetLocation1Value = sequenceReadArchive.getReversePCRPrimerTargetLocation1().getValue();
      if (ReversePCRPrimerTargetLocation1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("ReversePCRPrimerTargetLocation1");
        fileAttribute.setValue(ReversePCRPrimerTargetLocation1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


      // Complete Sequence

      String CompleteSequence1Value = sequenceReadArchive.getCompleteSequence1().getValue();
      if (CompleteSequence1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("CompleteSequence1");
        fileAttribute.setValue(CompleteSequence1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Physical Linkage of Different Loci

      String PhysicalLinkageOfDifferentLociValue = sequenceReadArchive.getPhysicalLinkageOfDifferentLoci().getValue();
      if (PhysicalLinkageOfDifferentLociValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("PhysicalLinkageOfDifferentLoci");
        fileAttribute.setValue(PhysicalLinkageOfDifferentLociValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


      // Template Amount

      String TemplateAmountValue = sequenceReadArchive.getTemplateAmount().getValue();
      if (TemplateAmountValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("TemplateAmount");
        fileAttribute.setValue(TemplateAmountValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Total Reads Passing QC Filter1

      String TotalReadsPassingQCFilter1Value = sequenceReadArchive.getTotalReadsPassingQCFilter1().getValue();
      if (TotalReadsPassingQCFilter1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("TotalReadsPassingQCFilter1");
        fileAttribute.setValue(TotalReadsPassingQCFilter1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Protocol ID

      String ProtocolID1Value = sequenceReadArchive.getProtocolID1().getValue();
      if (ProtocolID1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("ProtocolID1");
        fileAttribute.setValue(ProtocolID1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


      // Sequencing Platform

      String SequencingPlatform1Value = sequenceReadArchive.getSequencingPlatform1().getValue();
      if (SequencingPlatform1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("SequencingPlatform1");
        fileAttribute.setValue(SequencingPlatform1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


      // Sequencing Read Lengths

      String ReadLengthsValue = sequenceReadArchive.getReadLengths().getValue();
      if (ReadLengthsValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("ReadLengths");
        fileAttribute.setValue(ReadLengthsValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Sequencing Facility

      String SequencingFacility1Value = sequenceReadArchive.getSequencingFacility1().getValue();
      if (SequencingFacility1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("SequencingFacility1");
        fileAttribute.setValue(SequencingFacility1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Batch Number

      String BatchNumber1Value = sequenceReadArchive.getBatchNumber1().getValue();
      if (BatchNumber1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("BatchNumber1");
        fileAttribute.setValue(BatchNumber1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Date of Sequencing Run

      String DateOfSequencingRunValue = sequenceReadArchive.getDateOfSequencingRun().getValue();
      if (DateOfSequencingRunValue != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("DateOfSequencingRun");
        fileAttribute.setValue(DateOfSequencingRunValue);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }

      // Sequencing Kit

      String SequencingKit1Value = sequenceReadArchive.getSequencingKit1().getValue();
      if (SequencingKit1Value != null) {
        TypeFileAttribute fileAttribute = submissionObjectFactory.createTypeFileAttribute();
        fileAttribute.setName("SequencingKit1");
        fileAttribute.setValue(SequencingKit1Value);
        sraAddFiles.getAttributeOrMetaOrAttributeRefId().add(fileAttribute);
      }


      ///End of AIRR SRA Elements

      // Identifier: For SRA
      TypeLocalId localSraId = spCommonObjectFactory.createTypeLocalId();
      localSraId.setValue(createNewSraId());

      TypeIdentifier sraIdentifier = spCommonObjectFactory.createTypeIdentifier();
      sraIdentifier.setLocalId(localSraId);

      sraAddFiles.setIdentifier(sraIdentifier);

      // Action
      Submission.Action sraAction = submissionObjectFactory.createSubmissionAction();
      sraAction.setAddFiles(sraAddFiles);

      submission.getAction().add(sraAction);

      sraIndex++; // increment the index counter
    }

    // Generate XML from the submission instance
    StringWriter writer = new StringWriter();
    JAXBContext ctx = JAXBContext.newInstance(Submission.class);
    Marshaller marshaller = ctx.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
    marshaller.marshal(submission, writer);

    return writer.toString();
  }

  private XMLGregorianCalendar createXMLGregorianCalendar(String date) throws DatatypeConfigurationException {
    DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
    GregorianCalendar gc = new GregorianCalendar();

    return datatypeFactory.newXMLGregorianCalendar(gc);
  }

  private String createNewBioSampleId() {
    String id = "BioSample-" + UUID.randomUUID();
    bioSampleIds.add(id);
    return id;
  }

  private String createNewSraId() {
    String id = "SRA-" + UUID.randomUUID();
    sraIds.add(id);
    return id;
  }

  private String getBioSampleId(int index) {
    return bioSampleIds.get(index);
  }

  private String getSraId(int index) {
    return sraIds.get(index);
  }

}
